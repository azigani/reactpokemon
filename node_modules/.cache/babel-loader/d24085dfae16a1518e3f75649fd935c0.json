{"ast":null,"code":"export default class PokemonService {\n  static getPokemons() {\n    if (this.isDev) {\n      return fetch('http://localhost:3001/pokemons').then(response => response.json()).catch(error => this.handleError(error));\n    }\n    return new Promise(resolve => {\n      resolve(this.pokemons);\n    });\n  }\n  static getPokemon(id) {\n    if (this.isDev) {\n      return fetch(`http://localhost:3001/pokemons/${id}`).then(response => response.json()).then(data => this.isEmpty(data) ? null : data).catch(error => this.handleError(error));\n    }\n    return new Promise(resolve => {\n      resolve(this.pokemons.find(pokemon => id === pokemon.id));\n    });\n  }\n  static updatePokemon(pokemon) {\n    if (this.isDev) {\n      return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\n        method: 'PUT',\n        body: JSON.stringify(pokemon),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(response => response.json()).catch(error => this.handleError(error));\n    }\n    return new Promise(resolve => {\n      const {\n        id\n      } = pokemon;\n      const index = this.pokemons.findIndex(pokemon => pokemon.id === id);\n      this.pokemons[index] = pokemon;\n      resolve(pokemon);\n    });\n  }\n  static deletePokemon(pokemon) {\n    if (this.isDev) {\n      return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(response => response.json()).catch(error => this.handleError(error));\n    }\n    return new Promise(resolve => {\n      const {\n        id\n      } = pokemon;\n      this.pokemons = this.pokemons.filter(pokemon => pokemon.id !== id);\n      resolve({});\n    });\n  }\n  static addPokemon(pokemon) {\n    delete pokemon.created;\n    if (this.isDev) {\n      return fetch(`http://localhost:3001/pokemons`, {\n        method: 'POST',\n        body: JSON.stringify(pokemon),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(response => response.json()).catch(error => this.handleError(error));\n    }\n    return new Promise(resolve => {\n      this.pokemons.push(pokemon);\n      resolve(pokemon);\n    });\n  }\n  static searchPokemon(term) {\n    if (this.isDev) {\n      return fetch(`http://localhost:3001/pokemons?q=${term}`).then(response => response.json()).catch(error => this.handleError(error));\n    }\n    return new Promise(resolve => {\n      const results = this.pokemons.filter(pokemon => pokemon.name.includes(term));\n      resolve(results);\n    });\n  }\n  static isEmpty(data) {\n    return Object.keys(data).length === 0;\n  }\n  static handleError(error) {\n    console.error(error);\n  }\n}\nPokemonService.pokemons = POKEMONS;\nPokemonService.isDev = !process.env.NODE_ENV || process.env.NODE_ENV === 'development';","map":{"version":3,"names":["PokemonService","getPokemons","isDev","fetch","then","response","json","catch","error","handleError","Promise","resolve","pokemons","getPokemon","id","data","isEmpty","find","pokemon","updatePokemon","method","body","JSON","stringify","headers","index","findIndex","deletePokemon","filter","addPokemon","created","push","searchPokemon","term","results","name","includes","Object","keys","length","console","POKEMONS","process","env","NODE_ENV"],"sources":["C:/Users/DELL Gaming/Desktop/REACTJS/formationpokemon/src/services/pokemon-service.ts"],"sourcesContent":["import Pokemon from \"../models/pokemon\";\n\nexport default class PokemonService {\n\n  static pokemons:Pokemon[] = POKEMONS;\n\n  static isDev = (!process.env.NODE_ENV || process.env.NODE_ENV === 'development');\n\n  static getPokemons(): Promise<Pokemon[]> {\n    if(this.isDev) {\n      return fetch('http://localhost:3001/pokemons')\n      .then(response => response.json())\n      .catch(error => this.handleError(error));\n    }\n\n    return new Promise(resolve => {\n      resolve(this.pokemons);\n    });\n  }\n\n  static getPokemon(id: number): Promise<Pokemon|null> {\n    if(this.isDev) {\n      return fetch(`http://localhost:3001/pokemons/${id}`)\n      .then(response => response.json())\n      .then(data => this.isEmpty(data) ? null : data)\n      .catch(error => this.handleError(error));\n    }\n\n    return new Promise(resolve => {    \n      resolve(this.pokemons.find(pokemon => id === pokemon.id));\n    }); \n  }\n\n  static updatePokemon(pokemon: Pokemon): Promise<Pokemon> {\n    if(this.isDev) {\n      return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\n        method: 'PUT',\n        body: JSON.stringify(pokemon),\n        headers: { 'Content-Type': 'application/json'}\n      })\n      .then(response => response.json())\n      .catch(error => this.handleError(error));\n    }\n\n    return new Promise(resolve => {\n      const { id } = pokemon;\n      const index = this.pokemons.findIndex(pokemon => pokemon.id === id);\n      this.pokemons[index] = pokemon;\n      resolve(pokemon);\n    }); \n  }\n\n  static deletePokemon(pokemon: Pokemon): Promise<{}> {\n    if(this.isDev) {\n      return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json'}\n      })\n      .then(response => response.json())\n      .catch(error => this.handleError(error));\n    }\n\n    return new Promise(resolve => {    \n      const { id } = pokemon;\n      this.pokemons = this.pokemons.filter(pokemon => pokemon.id !== id);\n      resolve({});\n    }); \n  }\n\n  static addPokemon(pokemon: Pokemon): Promise<Pokemon> {\n    delete pokemon.created;\n\n    if(this.isDev) {\n      return fetch(`http://localhost:3001/pokemons`, {\n        method: 'POST',\n        body: JSON.stringify(pokemon),\n        headers: { 'Content-Type': 'application/json'}\n      })\n      .then(response => response.json())\n      .catch(error => this.handleError(error));\n    }\n\n    return new Promise(resolve => {    \n      this.pokemons.push(pokemon);\n      resolve(pokemon);\n    }); \n  }\n\n  static searchPokemon(term: string): Promise<Pokemon[]> {\n    if(this.isDev) {\n      return fetch(`http://localhost:3001/pokemons?q=${term}`)\n      .then(response => response.json())\n      .catch(error => this.handleError(error));\n    }\n\n    return new Promise(resolve => {    \n      const results = this.pokemons.filter(pokemon => pokemon.name.includes(term));\n      resolve(results);\n    });\n\n  }\n\n  static isEmpty(data: Object): boolean {\n    return Object.keys(data).length === 0;\n  }\n\n  static handleError(error: Error): void {\n    console.error(error);\n  }\n}"],"mappings":"AAEA,eAAe,MAAMA,cAAc,CAAC;EAMlC,OAAOC,WAAWA,CAAA,EAAuB;IACvC,IAAG,IAAI,CAACC,KAAK,EAAE;MACb,OAAOC,KAAK,CAAC,gCAAgC,CAAC,CAC7CC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCC,KAAK,CAACC,KAAK,IAAI,IAAI,CAACC,WAAW,CAACD,KAAK,CAAC,CAAC;IAC1C;IAEA,OAAO,IAAIE,OAAO,CAACC,OAAO,IAAI;MAC5BA,OAAO,CAAC,IAAI,CAACC,QAAQ,CAAC;IACxB,CAAC,CAAC;EACJ;EAEA,OAAOC,UAAUA,CAACC,EAAU,EAAyB;IACnD,IAAG,IAAI,CAACZ,KAAK,EAAE;MACb,OAAOC,KAAK,CAAC,kCAAkCW,EAAE,EAAE,CAAC,CACnDV,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACW,IAAI,IAAI,IAAI,CAACC,OAAO,CAACD,IAAI,CAAC,GAAG,IAAI,GAAGA,IAAI,CAAC,CAC9CR,KAAK,CAACC,KAAK,IAAI,IAAI,CAACC,WAAW,CAACD,KAAK,CAAC,CAAC;IAC1C;IAEA,OAAO,IAAIE,OAAO,CAACC,OAAO,IAAI;MAC5BA,OAAO,CAAC,IAAI,CAACC,QAAQ,CAACK,IAAI,CAACC,OAAO,IAAIJ,EAAE,KAAKI,OAAO,CAACJ,EAAE,CAAC,CAAC;IAC3D,CAAC,CAAC;EACJ;EAEA,OAAOK,aAAaA,CAACD,OAAgB,EAAoB;IACvD,IAAG,IAAI,CAAChB,KAAK,EAAE;MACb,OAAOC,KAAK,CAAC,kCAAkCe,OAAO,CAACJ,EAAE,EAAE,EAAE;QAC3DM,MAAM,EAAE,KAAK;QACbC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,OAAO,CAAC;QAC7BM,OAAO,EAAE;UAAE,cAAc,EAAE;QAAkB;MAC/C,CAAC,CAAC,CACDpB,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCC,KAAK,CAACC,KAAK,IAAI,IAAI,CAACC,WAAW,CAACD,KAAK,CAAC,CAAC;IAC1C;IAEA,OAAO,IAAIE,OAAO,CAACC,OAAO,IAAI;MAC5B,MAAM;QAAEG;MAAG,CAAC,GAAGI,OAAO;MACtB,MAAMO,KAAK,GAAG,IAAI,CAACb,QAAQ,CAACc,SAAS,CAACR,OAAO,IAAIA,OAAO,CAACJ,EAAE,KAAKA,EAAE,CAAC;MACnE,IAAI,CAACF,QAAQ,CAACa,KAAK,CAAC,GAAGP,OAAO;MAC9BP,OAAO,CAACO,OAAO,CAAC;IAClB,CAAC,CAAC;EACJ;EAEA,OAAOS,aAAaA,CAACT,OAAgB,EAAe;IAClD,IAAG,IAAI,CAAChB,KAAK,EAAE;MACb,OAAOC,KAAK,CAAC,kCAAkCe,OAAO,CAACJ,EAAE,EAAE,EAAE;QAC3DM,MAAM,EAAE,QAAQ;QAChBI,OAAO,EAAE;UAAE,cAAc,EAAE;QAAkB;MAC/C,CAAC,CAAC,CACDpB,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCC,KAAK,CAACC,KAAK,IAAI,IAAI,CAACC,WAAW,CAACD,KAAK,CAAC,CAAC;IAC1C;IAEA,OAAO,IAAIE,OAAO,CAACC,OAAO,IAAI;MAC5B,MAAM;QAAEG;MAAG,CAAC,GAAGI,OAAO;MACtB,IAAI,CAACN,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACgB,MAAM,CAACV,OAAO,IAAIA,OAAO,CAACJ,EAAE,KAAKA,EAAE,CAAC;MAClEH,OAAO,CAAC,CAAC,CAAC,CAAC;IACb,CAAC,CAAC;EACJ;EAEA,OAAOkB,UAAUA,CAACX,OAAgB,EAAoB;IACpD,OAAOA,OAAO,CAACY,OAAO;IAEtB,IAAG,IAAI,CAAC5B,KAAK,EAAE;MACb,OAAOC,KAAK,CAAC,gCAAgC,EAAE;QAC7CiB,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,OAAO,CAAC;QAC7BM,OAAO,EAAE;UAAE,cAAc,EAAE;QAAkB;MAC/C,CAAC,CAAC,CACDpB,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCC,KAAK,CAACC,KAAK,IAAI,IAAI,CAACC,WAAW,CAACD,KAAK,CAAC,CAAC;IAC1C;IAEA,OAAO,IAAIE,OAAO,CAACC,OAAO,IAAI;MAC5B,IAAI,CAACC,QAAQ,CAACmB,IAAI,CAACb,OAAO,CAAC;MAC3BP,OAAO,CAACO,OAAO,CAAC;IAClB,CAAC,CAAC;EACJ;EAEA,OAAOc,aAAaA,CAACC,IAAY,EAAsB;IACrD,IAAG,IAAI,CAAC/B,KAAK,EAAE;MACb,OAAOC,KAAK,CAAC,oCAAoC8B,IAAI,EAAE,CAAC,CACvD7B,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCC,KAAK,CAACC,KAAK,IAAI,IAAI,CAACC,WAAW,CAACD,KAAK,CAAC,CAAC;IAC1C;IAEA,OAAO,IAAIE,OAAO,CAACC,OAAO,IAAI;MAC5B,MAAMuB,OAAO,GAAG,IAAI,CAACtB,QAAQ,CAACgB,MAAM,CAACV,OAAO,IAAIA,OAAO,CAACiB,IAAI,CAACC,QAAQ,CAACH,IAAI,CAAC,CAAC;MAC5EtB,OAAO,CAACuB,OAAO,CAAC;IAClB,CAAC,CAAC;EAEJ;EAEA,OAAOlB,OAAOA,CAACD,IAAY,EAAW;IACpC,OAAOsB,MAAM,CAACC,IAAI,CAACvB,IAAI,CAAC,CAACwB,MAAM,KAAK,CAAC;EACvC;EAEA,OAAO9B,WAAWA,CAACD,KAAY,EAAQ;IACrCgC,OAAO,CAAChC,KAAK,CAACA,KAAK,CAAC;EACtB;AACF;AA3GqBR,cAAc,CAE1BY,QAAQ,GAAa6B,QAAQ;AAFjBzC,cAAc,CAI1BE,KAAK,GAAI,CAACwC,OAAO,CAACC,GAAG,CAACC,QAAQ,IAAIF,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module"}